"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RtmpResult = exports.FileResult = exports.RecordingInfo = exports.EndRecordingRequest = exports.RemoveOutputRequest = exports.AddOutputRequest = exports.StartRecordingResponse = exports.RecordingOptions = exports.RtmpOutput = exports.RecordingTemplate = exports.StartRecordingRequest = exports.recordingPresetToJSON = exports.recordingPresetFromJSON = exports.RecordingPreset = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "livekit";
var RecordingPreset;
(function (RecordingPreset) {
    /** NONE - All presets use 44100 Hz, 128k bitrate for audio and a color depth of 24 */
    RecordingPreset[RecordingPreset["NONE"] = 0] = "NONE";
    /** HD_30 - 720p, 30fps, 3000 kpbs */
    RecordingPreset[RecordingPreset["HD_30"] = 1] = "HD_30";
    /** HD_60 - 720p, 60fps, 4500 kbps */
    RecordingPreset[RecordingPreset["HD_60"] = 2] = "HD_60";
    /** FULL_HD_30 - 1080p, 30fps, 4500 kbps */
    RecordingPreset[RecordingPreset["FULL_HD_30"] = 3] = "FULL_HD_30";
    /** FULL_HD_60 - 1080p, 60fps, 6000 kbps */
    RecordingPreset[RecordingPreset["FULL_HD_60"] = 4] = "FULL_HD_60";
    RecordingPreset[RecordingPreset["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RecordingPreset = exports.RecordingPreset || (exports.RecordingPreset = {}));
function recordingPresetFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return RecordingPreset.NONE;
        case 1:
        case "HD_30":
            return RecordingPreset.HD_30;
        case 2:
        case "HD_60":
            return RecordingPreset.HD_60;
        case 3:
        case "FULL_HD_30":
            return RecordingPreset.FULL_HD_30;
        case 4:
        case "FULL_HD_60":
            return RecordingPreset.FULL_HD_60;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RecordingPreset.UNRECOGNIZED;
    }
}
exports.recordingPresetFromJSON = recordingPresetFromJSON;
function recordingPresetToJSON(object) {
    switch (object) {
        case RecordingPreset.NONE:
            return "NONE";
        case RecordingPreset.HD_30:
            return "HD_30";
        case RecordingPreset.HD_60:
            return "HD_60";
        case RecordingPreset.FULL_HD_30:
            return "FULL_HD_30";
        case RecordingPreset.FULL_HD_60:
            return "FULL_HD_60";
        default:
            return "UNKNOWN";
    }
}
exports.recordingPresetToJSON = recordingPresetToJSON;
const baseStartRecordingRequest = {};
exports.StartRecordingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.url !== undefined) {
            writer.uint32(10).string(message.url);
        }
        if (message.template !== undefined) {
            exports.RecordingTemplate.encode(message.template, writer.uint32(18).fork()).ldelim();
        }
        if (message.rtmp !== undefined) {
            exports.RtmpOutput.encode(message.rtmp, writer.uint32(26).fork()).ldelim();
        }
        if (message.filepath !== undefined) {
            writer.uint32(34).string(message.filepath);
        }
        if (message.options !== undefined) {
            exports.RecordingOptions.encode(message.options, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseStartRecordingRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.template = exports.RecordingTemplate.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.rtmp = exports.RtmpOutput.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.filepath = reader.string();
                    break;
                case 5:
                    message.options = exports.RecordingOptions.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseStartRecordingRequest);
        if (object.url !== undefined && object.url !== null) {
            message.url = String(object.url);
        }
        else {
            message.url = undefined;
        }
        if (object.template !== undefined && object.template !== null) {
            message.template = exports.RecordingTemplate.fromJSON(object.template);
        }
        else {
            message.template = undefined;
        }
        if (object.rtmp !== undefined && object.rtmp !== null) {
            message.rtmp = exports.RtmpOutput.fromJSON(object.rtmp);
        }
        else {
            message.rtmp = undefined;
        }
        if (object.filepath !== undefined && object.filepath !== null) {
            message.filepath = String(object.filepath);
        }
        else {
            message.filepath = undefined;
        }
        if (object.options !== undefined && object.options !== null) {
            message.options = exports.RecordingOptions.fromJSON(object.options);
        }
        else {
            message.options = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.url !== undefined && (obj.url = message.url);
        message.template !== undefined &&
            (obj.template = message.template
                ? exports.RecordingTemplate.toJSON(message.template)
                : undefined);
        message.rtmp !== undefined &&
            (obj.rtmp = message.rtmp ? exports.RtmpOutput.toJSON(message.rtmp) : undefined);
        message.filepath !== undefined && (obj.filepath = message.filepath);
        message.options !== undefined &&
            (obj.options = message.options
                ? exports.RecordingOptions.toJSON(message.options)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseStartRecordingRequest);
        if (object.url !== undefined && object.url !== null) {
            message.url = object.url;
        }
        else {
            message.url = undefined;
        }
        if (object.template !== undefined && object.template !== null) {
            message.template = exports.RecordingTemplate.fromPartial(object.template);
        }
        else {
            message.template = undefined;
        }
        if (object.rtmp !== undefined && object.rtmp !== null) {
            message.rtmp = exports.RtmpOutput.fromPartial(object.rtmp);
        }
        else {
            message.rtmp = undefined;
        }
        if (object.filepath !== undefined && object.filepath !== null) {
            message.filepath = object.filepath;
        }
        else {
            message.filepath = undefined;
        }
        if (object.options !== undefined && object.options !== null) {
            message.options = exports.RecordingOptions.fromPartial(object.options);
        }
        else {
            message.options = undefined;
        }
        return message;
    },
};
const baseRecordingTemplate = { layout: "", roomName: "", baseUrl: "" };
exports.RecordingTemplate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.layout !== "") {
            writer.uint32(10).string(message.layout);
        }
        if (message.roomName !== "") {
            writer.uint32(18).string(message.roomName);
        }
        if (message.baseUrl !== "") {
            writer.uint32(26).string(message.baseUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRecordingTemplate);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.layout = reader.string();
                    break;
                case 2:
                    message.roomName = reader.string();
                    break;
                case 3:
                    message.baseUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRecordingTemplate);
        if (object.layout !== undefined && object.layout !== null) {
            message.layout = String(object.layout);
        }
        else {
            message.layout = "";
        }
        if (object.roomName !== undefined && object.roomName !== null) {
            message.roomName = String(object.roomName);
        }
        else {
            message.roomName = "";
        }
        if (object.baseUrl !== undefined && object.baseUrl !== null) {
            message.baseUrl = String(object.baseUrl);
        }
        else {
            message.baseUrl = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.layout !== undefined && (obj.layout = message.layout);
        message.roomName !== undefined && (obj.roomName = message.roomName);
        message.baseUrl !== undefined && (obj.baseUrl = message.baseUrl);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRecordingTemplate);
        if (object.layout !== undefined && object.layout !== null) {
            message.layout = object.layout;
        }
        else {
            message.layout = "";
        }
        if (object.roomName !== undefined && object.roomName !== null) {
            message.roomName = object.roomName;
        }
        else {
            message.roomName = "";
        }
        if (object.baseUrl !== undefined && object.baseUrl !== null) {
            message.baseUrl = object.baseUrl;
        }
        else {
            message.baseUrl = "";
        }
        return message;
    },
};
const baseRtmpOutput = { urls: "" };
exports.RtmpOutput = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.urls) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRtmpOutput);
        message.urls = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.urls.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRtmpOutput);
        message.urls = [];
        if (object.urls !== undefined && object.urls !== null) {
            for (const e of object.urls) {
                message.urls.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.urls) {
            obj.urls = message.urls.map((e) => e);
        }
        else {
            obj.urls = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRtmpOutput);
        message.urls = [];
        if (object.urls !== undefined && object.urls !== null) {
            for (const e of object.urls) {
                message.urls.push(e);
            }
        }
        return message;
    },
};
const baseRecordingOptions = {
    preset: 0,
    width: 0,
    height: 0,
    depth: 0,
    framerate: 0,
    audioBitrate: 0,
    audioFrequency: 0,
    videoBitrate: 0,
    profile: "",
};
exports.RecordingOptions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.preset !== 0) {
            writer.uint32(8).int32(message.preset);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.depth !== 0) {
            writer.uint32(32).int32(message.depth);
        }
        if (message.framerate !== 0) {
            writer.uint32(40).int32(message.framerate);
        }
        if (message.audioBitrate !== 0) {
            writer.uint32(48).int32(message.audioBitrate);
        }
        if (message.audioFrequency !== 0) {
            writer.uint32(56).int32(message.audioFrequency);
        }
        if (message.videoBitrate !== 0) {
            writer.uint32(64).int32(message.videoBitrate);
        }
        if (message.profile !== "") {
            writer.uint32(74).string(message.profile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRecordingOptions);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.preset = reader.int32();
                    break;
                case 2:
                    message.width = reader.int32();
                    break;
                case 3:
                    message.height = reader.int32();
                    break;
                case 4:
                    message.depth = reader.int32();
                    break;
                case 5:
                    message.framerate = reader.int32();
                    break;
                case 6:
                    message.audioBitrate = reader.int32();
                    break;
                case 7:
                    message.audioFrequency = reader.int32();
                    break;
                case 8:
                    message.videoBitrate = reader.int32();
                    break;
                case 9:
                    message.profile = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRecordingOptions);
        if (object.preset !== undefined && object.preset !== null) {
            message.preset = recordingPresetFromJSON(object.preset);
        }
        else {
            message.preset = 0;
        }
        if (object.width !== undefined && object.width !== null) {
            message.width = Number(object.width);
        }
        else {
            message.width = 0;
        }
        if (object.height !== undefined && object.height !== null) {
            message.height = Number(object.height);
        }
        else {
            message.height = 0;
        }
        if (object.depth !== undefined && object.depth !== null) {
            message.depth = Number(object.depth);
        }
        else {
            message.depth = 0;
        }
        if (object.framerate !== undefined && object.framerate !== null) {
            message.framerate = Number(object.framerate);
        }
        else {
            message.framerate = 0;
        }
        if (object.audioBitrate !== undefined && object.audioBitrate !== null) {
            message.audioBitrate = Number(object.audioBitrate);
        }
        else {
            message.audioBitrate = 0;
        }
        if (object.audioFrequency !== undefined && object.audioFrequency !== null) {
            message.audioFrequency = Number(object.audioFrequency);
        }
        else {
            message.audioFrequency = 0;
        }
        if (object.videoBitrate !== undefined && object.videoBitrate !== null) {
            message.videoBitrate = Number(object.videoBitrate);
        }
        else {
            message.videoBitrate = 0;
        }
        if (object.profile !== undefined && object.profile !== null) {
            message.profile = String(object.profile);
        }
        else {
            message.profile = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.preset !== undefined &&
            (obj.preset = recordingPresetToJSON(message.preset));
        message.width !== undefined && (obj.width = message.width);
        message.height !== undefined && (obj.height = message.height);
        message.depth !== undefined && (obj.depth = message.depth);
        message.framerate !== undefined && (obj.framerate = message.framerate);
        message.audioBitrate !== undefined &&
            (obj.audioBitrate = message.audioBitrate);
        message.audioFrequency !== undefined &&
            (obj.audioFrequency = message.audioFrequency);
        message.videoBitrate !== undefined &&
            (obj.videoBitrate = message.videoBitrate);
        message.profile !== undefined && (obj.profile = message.profile);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRecordingOptions);
        if (object.preset !== undefined && object.preset !== null) {
            message.preset = object.preset;
        }
        else {
            message.preset = 0;
        }
        if (object.width !== undefined && object.width !== null) {
            message.width = object.width;
        }
        else {
            message.width = 0;
        }
        if (object.height !== undefined && object.height !== null) {
            message.height = object.height;
        }
        else {
            message.height = 0;
        }
        if (object.depth !== undefined && object.depth !== null) {
            message.depth = object.depth;
        }
        else {
            message.depth = 0;
        }
        if (object.framerate !== undefined && object.framerate !== null) {
            message.framerate = object.framerate;
        }
        else {
            message.framerate = 0;
        }
        if (object.audioBitrate !== undefined && object.audioBitrate !== null) {
            message.audioBitrate = object.audioBitrate;
        }
        else {
            message.audioBitrate = 0;
        }
        if (object.audioFrequency !== undefined && object.audioFrequency !== null) {
            message.audioFrequency = object.audioFrequency;
        }
        else {
            message.audioFrequency = 0;
        }
        if (object.videoBitrate !== undefined && object.videoBitrate !== null) {
            message.videoBitrate = object.videoBitrate;
        }
        else {
            message.videoBitrate = 0;
        }
        if (object.profile !== undefined && object.profile !== null) {
            message.profile = object.profile;
        }
        else {
            message.profile = "";
        }
        return message;
    },
};
const baseStartRecordingResponse = { recordingId: "" };
exports.StartRecordingResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseStartRecordingResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseStartRecordingResponse);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = String(object.recordingId);
        }
        else {
            message.recordingId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseStartRecordingResponse);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = object.recordingId;
        }
        else {
            message.recordingId = "";
        }
        return message;
    },
};
const baseAddOutputRequest = { recordingId: "", rtmpUrl: "" };
exports.AddOutputRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        if (message.rtmpUrl !== "") {
            writer.uint32(18).string(message.rtmpUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAddOutputRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                case 2:
                    message.rtmpUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAddOutputRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = String(object.recordingId);
        }
        else {
            message.recordingId = "";
        }
        if (object.rtmpUrl !== undefined && object.rtmpUrl !== null) {
            message.rtmpUrl = String(object.rtmpUrl);
        }
        else {
            message.rtmpUrl = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        message.rtmpUrl !== undefined && (obj.rtmpUrl = message.rtmpUrl);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAddOutputRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = object.recordingId;
        }
        else {
            message.recordingId = "";
        }
        if (object.rtmpUrl !== undefined && object.rtmpUrl !== null) {
            message.rtmpUrl = object.rtmpUrl;
        }
        else {
            message.rtmpUrl = "";
        }
        return message;
    },
};
const baseRemoveOutputRequest = { recordingId: "", rtmpUrl: "" };
exports.RemoveOutputRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        if (message.rtmpUrl !== "") {
            writer.uint32(18).string(message.rtmpUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRemoveOutputRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                case 2:
                    message.rtmpUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRemoveOutputRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = String(object.recordingId);
        }
        else {
            message.recordingId = "";
        }
        if (object.rtmpUrl !== undefined && object.rtmpUrl !== null) {
            message.rtmpUrl = String(object.rtmpUrl);
        }
        else {
            message.rtmpUrl = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        message.rtmpUrl !== undefined && (obj.rtmpUrl = message.rtmpUrl);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRemoveOutputRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = object.recordingId;
        }
        else {
            message.recordingId = "";
        }
        if (object.rtmpUrl !== undefined && object.rtmpUrl !== null) {
            message.rtmpUrl = object.rtmpUrl;
        }
        else {
            message.rtmpUrl = "";
        }
        return message;
    },
};
const baseEndRecordingRequest = { recordingId: "" };
exports.EndRecordingRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.recordingId !== "") {
            writer.uint32(10).string(message.recordingId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEndRecordingRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recordingId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEndRecordingRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = String(object.recordingId);
        }
        else {
            message.recordingId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.recordingId !== undefined &&
            (obj.recordingId = message.recordingId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEndRecordingRequest);
        if (object.recordingId !== undefined && object.recordingId !== null) {
            message.recordingId = object.recordingId;
        }
        else {
            message.recordingId = "";
        }
        return message;
    },
};
const baseRecordingInfo = {
    id: "",
    roomName: "",
    active: false,
    error: "",
};
exports.RecordingInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.roomName !== "") {
            writer.uint32(18).string(message.roomName);
        }
        if (message.active === true) {
            writer.uint32(24).bool(message.active);
        }
        if (message.error !== "") {
            writer.uint32(34).string(message.error);
        }
        if (message.file !== undefined) {
            exports.FileResult.encode(message.file, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.rtmp) {
            exports.RtmpResult.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRecordingInfo);
        message.rtmp = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.roomName = reader.string();
                    break;
                case 3:
                    message.active = reader.bool();
                    break;
                case 4:
                    message.error = reader.string();
                    break;
                case 5:
                    message.file = exports.FileResult.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.rtmp.push(exports.RtmpResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRecordingInfo);
        message.rtmp = [];
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        if (object.roomName !== undefined && object.roomName !== null) {
            message.roomName = String(object.roomName);
        }
        else {
            message.roomName = "";
        }
        if (object.active !== undefined && object.active !== null) {
            message.active = Boolean(object.active);
        }
        else {
            message.active = false;
        }
        if (object.error !== undefined && object.error !== null) {
            message.error = String(object.error);
        }
        else {
            message.error = "";
        }
        if (object.file !== undefined && object.file !== null) {
            message.file = exports.FileResult.fromJSON(object.file);
        }
        else {
            message.file = undefined;
        }
        if (object.rtmp !== undefined && object.rtmp !== null) {
            for (const e of object.rtmp) {
                message.rtmp.push(exports.RtmpResult.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.roomName !== undefined && (obj.roomName = message.roomName);
        message.active !== undefined && (obj.active = message.active);
        message.error !== undefined && (obj.error = message.error);
        message.file !== undefined &&
            (obj.file = message.file ? exports.FileResult.toJSON(message.file) : undefined);
        if (message.rtmp) {
            obj.rtmp = message.rtmp.map((e) => e ? exports.RtmpResult.toJSON(e) : undefined);
        }
        else {
            obj.rtmp = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRecordingInfo);
        message.rtmp = [];
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        if (object.roomName !== undefined && object.roomName !== null) {
            message.roomName = object.roomName;
        }
        else {
            message.roomName = "";
        }
        if (object.active !== undefined && object.active !== null) {
            message.active = object.active;
        }
        else {
            message.active = false;
        }
        if (object.error !== undefined && object.error !== null) {
            message.error = object.error;
        }
        else {
            message.error = "";
        }
        if (object.file !== undefined && object.file !== null) {
            message.file = exports.FileResult.fromPartial(object.file);
        }
        else {
            message.file = undefined;
        }
        if (object.rtmp !== undefined && object.rtmp !== null) {
            for (const e of object.rtmp) {
                message.rtmp.push(exports.RtmpResult.fromPartial(e));
            }
        }
        return message;
    },
};
const baseFileResult = { downloadUrl: "", duration: 0 };
exports.FileResult = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.downloadUrl !== "") {
            writer.uint32(10).string(message.downloadUrl);
        }
        if (message.duration !== 0) {
            writer.uint32(16).int64(message.duration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseFileResult);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.downloadUrl = reader.string();
                    break;
                case 2:
                    message.duration = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseFileResult);
        if (object.downloadUrl !== undefined && object.downloadUrl !== null) {
            message.downloadUrl = String(object.downloadUrl);
        }
        else {
            message.downloadUrl = "";
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = Number(object.duration);
        }
        else {
            message.duration = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.downloadUrl !== undefined &&
            (obj.downloadUrl = message.downloadUrl);
        message.duration !== undefined && (obj.duration = message.duration);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseFileResult);
        if (object.downloadUrl !== undefined && object.downloadUrl !== null) {
            message.downloadUrl = object.downloadUrl;
        }
        else {
            message.downloadUrl = "";
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = object.duration;
        }
        else {
            message.duration = 0;
        }
        return message;
    },
};
const baseRtmpResult = { streamUrl: "", duration: 0 };
exports.RtmpResult = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.streamUrl !== "") {
            writer.uint32(10).string(message.streamUrl);
        }
        if (message.duration !== 0) {
            writer.uint32(16).int64(message.duration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRtmpResult);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.streamUrl = reader.string();
                    break;
                case 2:
                    message.duration = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRtmpResult);
        if (object.streamUrl !== undefined && object.streamUrl !== null) {
            message.streamUrl = String(object.streamUrl);
        }
        else {
            message.streamUrl = "";
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = Number(object.duration);
        }
        else {
            message.duration = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.streamUrl !== undefined && (obj.streamUrl = message.streamUrl);
        message.duration !== undefined && (obj.duration = message.duration);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRtmpResult);
        if (object.streamUrl !== undefined && object.streamUrl !== null) {
            message.streamUrl = object.streamUrl;
        }
        else {
            message.streamUrl = "";
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = object.duration;
        }
        else {
            message.duration = 0;
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=livekit_recording.js.map