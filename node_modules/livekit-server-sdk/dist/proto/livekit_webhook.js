"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookEvent = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const livekit_models_1 = require("./livekit_models");
const livekit_recording_1 = require("./livekit_recording");
exports.protobufPackage = "livekit";
const baseWebhookEvent = { event: "", id: "", createdAt: 0 };
exports.WebhookEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.event !== "") {
            writer.uint32(10).string(message.event);
        }
        if (message.room !== undefined) {
            livekit_models_1.Room.encode(message.room, writer.uint32(18).fork()).ldelim();
        }
        if (message.participant !== undefined) {
            livekit_models_1.ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).ldelim();
        }
        if (message.recordingInfo !== undefined) {
            livekit_recording_1.RecordingInfo.encode(message.recordingInfo, writer.uint32(42).fork()).ldelim();
        }
        if (message.id !== "") {
            writer.uint32(50).string(message.id);
        }
        if (message.createdAt !== 0) {
            writer.uint32(56).int64(message.createdAt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseWebhookEvent);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.event = reader.string();
                    break;
                case 2:
                    message.room = livekit_models_1.Room.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.participant = livekit_models_1.ParticipantInfo.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.recordingInfo = livekit_recording_1.RecordingInfo.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.id = reader.string();
                    break;
                case 7:
                    message.createdAt = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseWebhookEvent);
        if (object.event !== undefined && object.event !== null) {
            message.event = String(object.event);
        }
        else {
            message.event = "";
        }
        if (object.room !== undefined && object.room !== null) {
            message.room = livekit_models_1.Room.fromJSON(object.room);
        }
        else {
            message.room = undefined;
        }
        if (object.participant !== undefined && object.participant !== null) {
            message.participant = livekit_models_1.ParticipantInfo.fromJSON(object.participant);
        }
        else {
            message.participant = undefined;
        }
        if (object.recordingInfo !== undefined && object.recordingInfo !== null) {
            message.recordingInfo = livekit_recording_1.RecordingInfo.fromJSON(object.recordingInfo);
        }
        else {
            message.recordingInfo = undefined;
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        if (object.createdAt !== undefined && object.createdAt !== null) {
            message.createdAt = Number(object.createdAt);
        }
        else {
            message.createdAt = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.event !== undefined && (obj.event = message.event);
        message.room !== undefined &&
            (obj.room = message.room ? livekit_models_1.Room.toJSON(message.room) : undefined);
        message.participant !== undefined &&
            (obj.participant = message.participant
                ? livekit_models_1.ParticipantInfo.toJSON(message.participant)
                : undefined);
        message.recordingInfo !== undefined &&
            (obj.recordingInfo = message.recordingInfo
                ? livekit_recording_1.RecordingInfo.toJSON(message.recordingInfo)
                : undefined);
        message.id !== undefined && (obj.id = message.id);
        message.createdAt !== undefined && (obj.createdAt = message.createdAt);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseWebhookEvent);
        if (object.event !== undefined && object.event !== null) {
            message.event = object.event;
        }
        else {
            message.event = "";
        }
        if (object.room !== undefined && object.room !== null) {
            message.room = livekit_models_1.Room.fromPartial(object.room);
        }
        else {
            message.room = undefined;
        }
        if (object.participant !== undefined && object.participant !== null) {
            message.participant = livekit_models_1.ParticipantInfo.fromPartial(object.participant);
        }
        else {
            message.participant = undefined;
        }
        if (object.recordingInfo !== undefined && object.recordingInfo !== null) {
            message.recordingInfo = livekit_recording_1.RecordingInfo.fromPartial(object.recordingInfo);
        }
        else {
            message.recordingInfo = undefined;
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        if (object.createdAt !== undefined && object.createdAt !== null) {
            message.createdAt = object.createdAt;
        }
        else {
            message.createdAt = 0;
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=livekit_webhook.js.map