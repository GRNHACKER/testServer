import _m0 from "protobufjs/minimal";
import { TrackInfo, DataPacket_Kind, Room, ParticipantInfo, ParticipantTracks } from "./livekit_models";
export declare const protobufPackage = "livekit";
export interface CreateRoomRequest {
    /** name of the room */
    name: string;
    /** number of seconds to keep the room open if no one joins */
    emptyTimeout: number;
    /** limit number of participants that can be in a room */
    maxParticipants: number;
    /** override the node room is allocated to, for debugging */
    nodeId: string;
    /** metadata of room */
    metadata: string;
}
export interface ListRoomsRequest {
    /** when set, will only return rooms with name match */
    names: string[];
}
export interface ListRoomsResponse {
    rooms: Room[];
}
export interface DeleteRoomRequest {
    /** name of the room */
    room: string;
}
export interface DeleteRoomResponse {
}
export interface ListParticipantsRequest {
    /** name of the room */
    room: string;
}
export interface ListParticipantsResponse {
    participants: ParticipantInfo[];
}
export interface RoomParticipantIdentity {
    /** name of the room */
    room: string;
    /** identity of the participant */
    identity: string;
}
export interface RemoveParticipantResponse {
}
export interface MuteRoomTrackRequest {
    /** name of the room */
    room: string;
    identity: string;
    /** sid of the track to mute */
    trackSid: string;
    /** set to true to mute, false to unmute */
    muted: boolean;
}
export interface MuteRoomTrackResponse {
    track?: TrackInfo;
}
export interface ParticipantPermission {
    /** allow participant to subscribe to other tracks in the room */
    canSubscribe: boolean;
    /** allow participant to publish new tracks to room */
    canPublish: boolean;
    /** allow participant to publish data */
    canPublishData: boolean;
}
export interface UpdateParticipantRequest {
    room: string;
    identity: string;
    /** metadata to update. skipping updates if left empty */
    metadata: string;
    /** set to update the participant's permissions */
    permission?: ParticipantPermission;
}
export interface UpdateSubscriptionsRequest {
    room: string;
    identity: string;
    /** list of sids of tracks */
    trackSids: string[];
    /** set to true to subscribe, false to unsubscribe from tracks */
    subscribe: boolean;
    /** list of participants and their tracks */
    participantTracks: ParticipantTracks[];
}
/** empty for now */
export interface UpdateSubscriptionsResponse {
}
export interface SendDataRequest {
    room: string;
    data: Uint8Array;
    kind: DataPacket_Kind;
    destinationSids: string[];
}
/**  */
export interface SendDataResponse {
}
export interface UpdateRoomMetadataRequest {
    room: string;
    /** metadata to update. skipping updates if left empty */
    metadata: string;
}
export declare const CreateRoomRequest: {
    encode(message: CreateRoomRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateRoomRequest;
    fromJSON(object: any): CreateRoomRequest;
    toJSON(message: CreateRoomRequest): unknown;
    fromPartial(object: DeepPartial<CreateRoomRequest>): CreateRoomRequest;
};
export declare const ListRoomsRequest: {
    encode(message: ListRoomsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListRoomsRequest;
    fromJSON(object: any): ListRoomsRequest;
    toJSON(message: ListRoomsRequest): unknown;
    fromPartial(object: DeepPartial<ListRoomsRequest>): ListRoomsRequest;
};
export declare const ListRoomsResponse: {
    encode(message: ListRoomsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListRoomsResponse;
    fromJSON(object: any): ListRoomsResponse;
    toJSON(message: ListRoomsResponse): unknown;
    fromPartial(object: DeepPartial<ListRoomsResponse>): ListRoomsResponse;
};
export declare const DeleteRoomRequest: {
    encode(message: DeleteRoomRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteRoomRequest;
    fromJSON(object: any): DeleteRoomRequest;
    toJSON(message: DeleteRoomRequest): unknown;
    fromPartial(object: DeepPartial<DeleteRoomRequest>): DeleteRoomRequest;
};
export declare const DeleteRoomResponse: {
    encode(_: DeleteRoomResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteRoomResponse;
    fromJSON(_: any): DeleteRoomResponse;
    toJSON(_: DeleteRoomResponse): unknown;
    fromPartial(_: DeepPartial<DeleteRoomResponse>): DeleteRoomResponse;
};
export declare const ListParticipantsRequest: {
    encode(message: ListParticipantsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListParticipantsRequest;
    fromJSON(object: any): ListParticipantsRequest;
    toJSON(message: ListParticipantsRequest): unknown;
    fromPartial(object: DeepPartial<ListParticipantsRequest>): ListParticipantsRequest;
};
export declare const ListParticipantsResponse: {
    encode(message: ListParticipantsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ListParticipantsResponse;
    fromJSON(object: any): ListParticipantsResponse;
    toJSON(message: ListParticipantsResponse): unknown;
    fromPartial(object: DeepPartial<ListParticipantsResponse>): ListParticipantsResponse;
};
export declare const RoomParticipantIdentity: {
    encode(message: RoomParticipantIdentity, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RoomParticipantIdentity;
    fromJSON(object: any): RoomParticipantIdentity;
    toJSON(message: RoomParticipantIdentity): unknown;
    fromPartial(object: DeepPartial<RoomParticipantIdentity>): RoomParticipantIdentity;
};
export declare const RemoveParticipantResponse: {
    encode(_: RemoveParticipantResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RemoveParticipantResponse;
    fromJSON(_: any): RemoveParticipantResponse;
    toJSON(_: RemoveParticipantResponse): unknown;
    fromPartial(_: DeepPartial<RemoveParticipantResponse>): RemoveParticipantResponse;
};
export declare const MuteRoomTrackRequest: {
    encode(message: MuteRoomTrackRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MuteRoomTrackRequest;
    fromJSON(object: any): MuteRoomTrackRequest;
    toJSON(message: MuteRoomTrackRequest): unknown;
    fromPartial(object: DeepPartial<MuteRoomTrackRequest>): MuteRoomTrackRequest;
};
export declare const MuteRoomTrackResponse: {
    encode(message: MuteRoomTrackResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MuteRoomTrackResponse;
    fromJSON(object: any): MuteRoomTrackResponse;
    toJSON(message: MuteRoomTrackResponse): unknown;
    fromPartial(object: DeepPartial<MuteRoomTrackResponse>): MuteRoomTrackResponse;
};
export declare const ParticipantPermission: {
    encode(message: ParticipantPermission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ParticipantPermission;
    fromJSON(object: any): ParticipantPermission;
    toJSON(message: ParticipantPermission): unknown;
    fromPartial(object: DeepPartial<ParticipantPermission>): ParticipantPermission;
};
export declare const UpdateParticipantRequest: {
    encode(message: UpdateParticipantRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateParticipantRequest;
    fromJSON(object: any): UpdateParticipantRequest;
    toJSON(message: UpdateParticipantRequest): unknown;
    fromPartial(object: DeepPartial<UpdateParticipantRequest>): UpdateParticipantRequest;
};
export declare const UpdateSubscriptionsRequest: {
    encode(message: UpdateSubscriptionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptionsRequest;
    fromJSON(object: any): UpdateSubscriptionsRequest;
    toJSON(message: UpdateSubscriptionsRequest): unknown;
    fromPartial(object: DeepPartial<UpdateSubscriptionsRequest>): UpdateSubscriptionsRequest;
};
export declare const UpdateSubscriptionsResponse: {
    encode(_: UpdateSubscriptionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateSubscriptionsResponse;
    fromJSON(_: any): UpdateSubscriptionsResponse;
    toJSON(_: UpdateSubscriptionsResponse): unknown;
    fromPartial(_: DeepPartial<UpdateSubscriptionsResponse>): UpdateSubscriptionsResponse;
};
export declare const SendDataRequest: {
    encode(message: SendDataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SendDataRequest;
    fromJSON(object: any): SendDataRequest;
    toJSON(message: SendDataRequest): unknown;
    fromPartial(object: DeepPartial<SendDataRequest>): SendDataRequest;
};
export declare const SendDataResponse: {
    encode(_: SendDataResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SendDataResponse;
    fromJSON(_: any): SendDataResponse;
    toJSON(_: SendDataResponse): unknown;
    fromPartial(_: DeepPartial<SendDataResponse>): SendDataResponse;
};
export declare const UpdateRoomMetadataRequest: {
    encode(message: UpdateRoomMetadataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateRoomMetadataRequest;
    fromJSON(object: any): UpdateRoomMetadataRequest;
    toJSON(message: UpdateRoomMetadataRequest): unknown;
    fromPartial(object: DeepPartial<UpdateRoomMetadataRequest>): UpdateRoomMetadataRequest;
};
/**
 * Room service that can be performed on any node
 * they are Twirp-based HTTP req/responses
 */
export interface RoomService {
    /**
     * Creates a room with settings. Requires `roomCreate` permission.
     * This method is optional; rooms are automatically created when clients connect to them for the first time.
     */
    CreateRoom(request: CreateRoomRequest): Promise<Room>;
    /** List rooms that are active on the server. Requires `roomList` permission. */
    ListRooms(request: ListRoomsRequest): Promise<ListRoomsResponse>;
    /**
     * Deletes an existing room by name or id. Requires `roomCreate` permission.
     * DeleteRoom will disconnect all participants that are currently in the room.
     */
    DeleteRoom(request: DeleteRoomRequest): Promise<DeleteRoomResponse>;
    /** Lists participants in a room, Requires `roomAdmin` */
    ListParticipants(request: ListParticipantsRequest): Promise<ListParticipantsResponse>;
    /** Get information on a specific participant, Requires `roomAdmin` */
    GetParticipant(request: RoomParticipantIdentity): Promise<ParticipantInfo>;
    /** Removes a participant from room. Requires `roomAdmin` */
    RemoveParticipant(request: RoomParticipantIdentity): Promise<RemoveParticipantResponse>;
    /** Mute/unmute a participant's track, Requires `roomAdmin` */
    MutePublishedTrack(request: MuteRoomTrackRequest): Promise<MuteRoomTrackResponse>;
    /** Update participant metadata, will cause updates to be broadcasted to everyone in the room. Requires `roomAdmin` */
    UpdateParticipant(request: UpdateParticipantRequest): Promise<ParticipantInfo>;
    /** Subscribes or unsubscribe a participant from tracks. Requires `roomAdmin` */
    UpdateSubscriptions(request: UpdateSubscriptionsRequest): Promise<UpdateSubscriptionsResponse>;
    /** Send data over data channel to participants in a room, Requires `roomAdmin` */
    SendData(request: SendDataRequest): Promise<SendDataResponse>;
    /** Update room metadata, will cause updates to be broadcasted to everyone in the room, Requires `roomAdmin` */
    UpdateRoomMetadata(request: UpdateRoomMetadataRequest): Promise<Room>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
